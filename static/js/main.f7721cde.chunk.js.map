{"version":3,"sources":["components/ChangeButton.js","components/DeleteButton.js","components/CompleteButton.js","components/AddButton.js","App.js","serviceWorker.js","index.js"],"names":["ChangeButton","props","onClick","className","viewBox","width","height","fill","d","DeleteButton","CompleteButton","AddButton","TodoForm","addTodo","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","App","todos","setTodos","toggleAll","completedTodos","forEach","todo","isCompleted","newTodos","length","text","editing","map","index","key","placeholder","event","handleSubmitChange","style","textDecorationLine","filter","idx","handleDelete","submitChange","handleChange","handleCompleted","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7721cde.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function ChangeButton(props) {\r\n  return (\r\n    <button onClick={props.onClick} className='todoButton'>\r\n      <svg className=\"todoIcon\" viewBox=\"0 0 20 20\" width='20' height='20'>\r\n        <path fill=\"black\" d=\"M19.404,6.65l-5.998-5.996c-0.292-0.292-0.765-0.292-1.056,0l-2.22,2.22l-8.311,8.313l-0.003,0.001v0.003l-0.161,0.161c-0.114,0.112-0.187,0.258-0.21,0.417l-1.059,7.051c-0.035,0.233,0.044,0.47,0.21,0.639c0.143,0.14,0.333,0.219,0.528,0.219c0.038,0,0.073-0.003,0.111-0.009l7.054-1.055c0.158-0.025,0.306-0.098,0.417-0.211l8.478-8.476l2.22-2.22C19.695,7.414,19.695,6.941,19.404,6.65z M8.341,16.656l-0.989-0.99l7.258-7.258l0.989,0.99L8.341,16.656z M2.332,15.919l0.411-2.748l4.143,4.143l-2.748,0.41L2.332,15.919z M13.554,7.351L6.296,14.61l-0.849-0.848l7.259-7.258l0.423,0.424L13.554,7.351zM10.658,4.457l0.992,0.99l-7.259,7.258L3.4,11.715L10.658,4.457z M16.656,8.342l-1.517-1.517V6.823h-0.003l-0.951-0.951l-2.471-2.471l1.164-1.164l4.942,4.94L16.656,8.342z\"></path>\r\n      </svg>\r\n    </button>\r\n  )\r\n};","import React from 'react';\r\n\r\nexport default function DeleteButton(props) {\r\n  return (\r\n    <button onClick={props.onClick} className=\"todoButton\">\r\n      <svg className=\"todoIcon\" viewBox=\"0 0 20 20\" width='20' height='20'>\r\n        <path fill=\"black\" d=\"M11.469,10l7.08-7.08c0.406-0.406,0.406-1.064,0-1.469c-0.406-0.406-1.063-0.406-1.469,0L10,8.53l-7.081-7.08\r\n        c-0.406-0.406-1.064-0.406-1.469,0c-0.406,0.406-0.406,1.063,0,1.469L8.531,10L1.45,17.081c-0.406,0.406-0.406,1.064,0,1.469\r\n        c0.203,0.203,0.469,0.304,0.735,0.304c0.266,0,0.531-0.101,0.735-0.304L10,11.469l7.08,7.081c0.203,0.203,0.469,0.304,0.735,0.304\r\n        c0.267,0,0.532-0.101,0.735-0.304c0.406-0.406,0.406-1.064,0-1.469L11.469,10z\"></path>\r\n      </svg>\r\n    </button>\r\n  )\r\n};","import React from 'react';\r\n\r\nexport default function CompleteButton(props) {\r\n  return (\r\n    <button onClick={props.onClick} className=\"todoButton\">\r\n      <svg className=\"todoIcon\" viewBox=\"0 0 20 20\" width='20' height='20'>\r\n        <path fill=\"black\" d=\"M7.197,16.963H7.195c-0.204,0-0.399-0.083-0.544-0.227l-6.039-6.082c-0.3-0.302-0.297-0.788,0.003-1.087\r\n        C0.919,9.266,1.404,9.269,1.702,9.57l5.495,5.536L18.221,4.083c0.301-0.301,0.787-0.301,1.087,0c0.301,0.3,0.301,0.787,0,1.087\r\n        L7.741,16.738C7.596,16.882,7.401,16.963,7.197,16.963z\"></path>\r\n      </svg>\r\n      </button>\r\n  )\r\n}","import React from 'react';\r\n\r\nexport default function AddButton(props) {\r\n  return (\r\n    <button className='addButton'>\r\n      <svg className='addIcon' viewBox=\"0 0 20 20\" width='26' height='26'>\r\n        <path fill=\"black\" d=\"M13.68,9.448h-3.128V6.319c0-0.304-0.248-0.551-0.552-0.551S9.448,6.015,9.448,6.319v3.129H6.319\r\n                  c-0.304,0-0.551,0.247-0.551,0.551s0.247,0.551,0.551,0.551h3.129v3.129c0,0.305,0.248,0.551,0.552,0.551s0.552-0.246,0.552-0.551\r\n                  v-3.129h3.128c0.305,0,0.552-0.247,0.552-0.551S13.984,9.448,13.68,9.448z M10,0.968c-4.987,0-9.031,4.043-9.031,9.031\r\n                  c0,4.989,4.044,9.032,9.031,9.032c4.988,0,9.031-4.043,9.031-9.032C19.031,5.012,14.988,0.968,10,0.968z M10,17.902\r\n                  c-4.364,0-7.902-3.539-7.902-7.903c0-4.365,3.538-7.902,7.902-7.902S17.902,5.635,17.902,10C17.902,14.363,14.364,17.902,10,17.902\r\n                  z\"></path>\r\n      </svg>\r\n    </button>\r\n  )\r\n}","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport ChangeButton from \"./components/ChangeButton\";\nimport DeleteButton from \"./components/DeleteButton\";\nimport CompleteButton from \"./components/CompleteButton\";\nimport AddButton from \"./components/AddButton\";\n\nfunction TodoForm({ addTodo }) {\n  const [value, setValue] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!value) return;\n    addTodo(value);\n    setValue(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"addTodo\">\n      <input\n        type=\"text\"\n        className=\"addTodoInput\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      />\n      <AddButton />\n    </form>\n  );\n}\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  const addTodo = text => {\n    const newTodos = [\n      ...todos,\n      {\n        text,\n        isCompleted: false,\n        editing: false\n      }\n    ];\n    setTodos(newTodos);\n  };\n\n  const handleCompleted = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = !newTodos[index].isCompleted;\n    setTodos(newTodos);\n  };\n\n  const handleDelete = index => {\n    const newTodos = todos.filter((todo, idx) => idx !== index);\n    setTodos(newTodos);\n  };\n\n  const handleChange = index => {\n    const newTodos = [...todos];\n    newTodos[index].editing = !newTodos[index].editing;\n    setTodos(newTodos);\n  };\n\n  const submitChange = index => {\n    const newTodos = [...todos];\n    newTodos[index].editing = !newTodos[index].editing;\n    setTodos(newTodos);\n  };\n\n  const handleSubmitChange = (event, index) => {\n    const newTodos = [...todos];\n    newTodos[index].text = event.target.value;\n    setTodos(newTodos);\n  };\n\n  const toggleAll = () => {\n    let completedTodos = 0;\n\n    todos.forEach(todo => {\n      if (todo.isCompleted === true) {\n        completedTodos++;\n      }\n    });\n\n    const newTodos = [...todos];\n\n    newTodos.forEach(todo => {\n      if (completedTodos === newTodos.length) {\n        todo.isCompleted = false;\n      } else {\n        todo.isCompleted = true;\n      }\n    });\n    setTodos(newTodos);\n  };\n\n  return (\n    <main className=\"whiteBox\">\n      <div className=\"line one\"></div>\n      <div className=\"line two\"></div>\n      <div className=\"line three\"></div>\n\n      <div className=\"leftContainer\">\n        <h3>Todos</h3>\n        <div className=\"addTodo\">\n          <TodoForm addTodo={addTodo} />\n        </div>\n      </div>\n\n      <div className=\"rightContainer\">\n        <ul>\n          {todos.map((todo, index) => (\n            <li key={index} className=\"todo\">\n              {todo.editing ? (\n                <input\n                  placeholder=\"Add Todo\"\n                  type=\"text\"\n                  value={todo.text}\n                  className=\"submitInput\"\n                  onChange={e => handleSubmitChange(e, index)}\n                />\n              ) : (\n                <li\n                  style={{\n                    textDecorationLine: todo.isCompleted ? \"line-through\" : \"\"\n                  }}\n                >\n                  {todo.text}\n                </li>\n              )}\n              <div className=\"todoButtons\">\n                {!todo.editing && (\n                  <DeleteButton onClick={() => handleDelete(index)} />\n                )}\n\n                {todo.editing ? (\n                  <button\n                    onClick={() => submitChange(index)}\n                    className=\"submitButton\"\n                  >\n                    Submit\n                  </button>\n                ) : (\n                  <ChangeButton onClick={() => handleChange(index)} />\n                )}\n\n                {!todo.editing && (\n                  <CompleteButton onClick={() => handleCompleted(index)} />\n                )}\n              </div>\n            </li>\n          ))}\n        </ul>\n        {todos.length !== 0 && (\n          <div className=\"toggleAll\">\n            <h4 onClick={() => toggleAll()}>Complete All</h4>\n            <CompleteButton onClick={() => toggleAll()} />\n          </div>\n        )}\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}